name: Optimized CI/CD Pipeline for ROCKET Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'
  FRONTEND_DIR: 'apps/web-app'
  BACKEND_DIR: 'apps/backend'

jobs:
  quality-gate:
    name: Quality Gate & Security Scan
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          frontend:
            - 'apps/web-app/**'
            - '.github/workflows/**'
          backend:
            - 'apps/backend/**'
            - '.github/workflows/**'

    - name: Setup Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Setup Python
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install frontend dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci --prefer-offline --no-audit

    - name: Install backend dependencies
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd ${{ env.BACKEND_DIR }}
        pip install -r requirements_production.txt

    - name: Frontend lint & format check
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run lint
        npx prettier --check src/

    - name: Backend code quality
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd ${{ env.BACKEND_DIR }}
        pip install black isort flake8
        black --check app/
        isort --check-only app/
        flake8 app/ --max-line-length=88

    - name: Security scan
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_PYTHON_BLACK: true

  test-frontend:
    name: Frontend Tests & Build Verification
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.frontend-changed == 'true'
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm ci --prefer-offline --no-audit

    - name: Run tests with coverage
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm test -- --coverage --watchAll=false

    - name: Build verification
      run: |
        cd ${{ env.FRONTEND_DIR }}
        VITE_API_URL=https://resume-builder-ai-production.up.railway.app npm run build

    - name: Bundle analysis
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npx vite-bundle-analyzer dist/assets/index-*.js

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: ${{ env.FRONTEND_DIR }}/dist
        retention-days: 7

  test-backend:
    name: Backend Tests & API Validation
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.backend-changed == 'true'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_resume_builder
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd ${{ env.BACKEND_DIR }}
        pip install -r requirements_production.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Database setup
      run: |
        cd ${{ env.BACKEND_DIR }}
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_resume_builder
        python create_rocket_tables.py

    - name: Run tests with coverage
      run: |
        cd ${{ env.BACKEND_DIR }}
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_resume_builder
        pytest --cov=app --cov-report=xml --cov-report=html

    - name: API endpoint validation
      run: |
        cd ${{ env.BACKEND_DIR }}
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_resume_builder
        python -m uvicorn expanded_main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/api/v1/rocket/health
        curl -f http://localhost:8000/api/v1/elite/health

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ${{ env.BACKEND_DIR }}/coverage.xml

  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: always() && (needs.test-frontend.result == 'success' || needs.test-backend.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Performance testing setup
      run: |
        npm install -g lighthouse artillery

    - name: Frontend performance audit
      if: needs.test-frontend.result == 'success'
      run: |
        cd ${{ env.FRONTEND_DIR }}
        npm run build
        npm run preview &
        sleep 10
        lighthouse http://localhost:4173 --output json --output-path lighthouse-report.json
        
    - name: Backend load testing
      if: needs.test-backend.result == 'success'
      run: |
        echo "config:" > artillery-config.yml
        echo "  target: 'https://resume-builder-ai-production.up.railway.app'" >> artillery-config.yml
        echo "  phases:" >> artillery-config.yml
        echo "    - duration: 60" >> artillery-config.yml
        echo "      arrivalRate: 10" >> artillery-config.yml
        echo "scenarios:" >> artillery-config.yml
        echo "  - name: 'Health Check Load Test'" >> artillery-config.yml
        echo "    requests:" >> artillery-config.yml
        echo "      - get:" >> artillery-config.yml
        echo "          url: '/health'" >> artillery-config.yml
        artillery run artillery-config.yml

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [quality-gate, test-frontend, test-backend]
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy frontend to staging
      if: needs.quality-gate.outputs.frontend-changed == 'true'
      run: |
        echo "Deploying frontend to staging Netlify site..."
        # Add staging deployment logic here

    - name: Deploy backend to staging
      if: needs.quality-gate.outputs.backend-changed == 'true'
      run: |
        echo "Deploying backend to staging Railway environment..."
        # Add staging deployment logic here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging environment..."
        # Add smoke test logic here

  deploy-production:
    name: Zero-Downtime Production Deployment
    runs-on: ubuntu-latest
    needs: [quality-gate, test-frontend, test-backend, performance-test]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Pre-deployment health check
      run: |
        curl -f https://resume-builder-ai-production.up.railway.app/health
        curl -f https://tranquil-frangipane-ceffd4.netlify.app

    - name: Deploy frontend with zero-downtime
      if: needs.quality-gate.outputs.frontend-changed == 'true'
      run: |
        cd ${{ env.FRONTEND_DIR }}
        # Build with production optimizations
        VITE_API_URL=https://resume-builder-ai-production.up.railway.app npm run build
        
        # Deploy to Netlify with atomic deployment
        echo "Deploying to Netlify with atomic deployment..."
        npx netlify-cli deploy --prod --dir=dist --site=${{ secrets.NETLIFY_SITE_ID }} --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Deploy backend with zero-downtime
      if: needs.quality-gate.outputs.backend-changed == 'true'
      run: |
        echo "Deploying backend to Railway with zero-downtime..."
        # Railway automatically handles zero-downtime deployments
        # Using Railway CLI or API for deployment

    - name: Post-deployment health verification
      run: |
        # Wait for deployment to settle
        sleep 30
        
        # Comprehensive health checks
        curl -f https://resume-builder-ai-production.up.railway.app/health
        curl -f https://resume-builder-ai-production.up.railway.app/api/v1/rocket/health
        curl -f https://resume-builder-ai-production.up.railway.app/api/v1/elite/health
        curl -f https://tranquil-frangipane-ceffd4.netlify.app

    - name: Performance validation
      run: |
        # Validate response times are under 200ms
        response_time=$(curl -o /dev/null -s -w '%{time_total}' https://resume-builder-ai-production.up.railway.app/health)
        if (( $(echo "$response_time > 0.2" | bc -l) )); then
          echo "Performance degradation detected: ${response_time}s > 200ms"
          exit 1
        fi

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Add rollback logic here

  post-deployment:
    name: Post-Deployment Monitoring & Alerting
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
    - name: Setup monitoring
      run: |
        echo "Setting up enhanced monitoring for new deployment..."
        
    - name: Validate ROCKET Framework features
      run: |
        # Test ROCKET Framework endpoints
        curl -f -X POST https://resume-builder-ai-production.up.railway.app/api/v1/rocket/conversation \
          -H "Content-Type: application/json" \
          -d '{"message": "Hello, test the ROCKET Framework", "persona": "dr_maya"}'

    - name: Validate Elite Comparison Engine
      run: |
        # Test Elite Comparison Engine endpoints
        curl -f https://resume-builder-ai-production.up.railway.app/api/v1/elite/health

    - name: Send deployment notification
      run: |
        echo "Deployment completed successfully!"
        echo "ROCKET Framework: ✅ Operational"
        echo "Elite Comparison Engine: ✅ Operational"
        echo "Response Time: < 200ms"
        echo "Zero-Downtime: ✅ Achieved"